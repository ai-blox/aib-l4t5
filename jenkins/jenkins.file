node('jenkins-ec2-plugin-slave') {

}

def PULL_RESULT = "Empty"

pipeline {
	agent {
        dockerfile {
            dir 'jenkins'
            filename 'Dockerfile'
        }
    }
    environment {
        BRANCH = 'aib-l4t-r35.2.1'
    }
	stages {
        stage('Pull Kernel') {
            steps {
                slackSend (color: '#7CFC00', message: "Started: L4T SP5 build -- Build ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
                script {
                    PULL_RESULT = sh(
                        script: "./update_source.sh \"${env.BRANCH}\"",
                        returnStdout: true
                     ).trim()
                     echo "PULL RESULT: ${PULL_RESULT}"
                 }

            }
            post{
                failure {
                    slackSend (color: '#fc0000', message: "Build ${env.BUILD_NUMBER} failed: Pull kernel failed: ${PULL_RESULT} -- (<${env.BUILD_URL}|Open>)")")
                   // script {
                   //     slackSend (color: '#fc0000', message: "Build ${env.BUILD_NUMBER} failed: Pull kernel failed: ${PULL_RESULT} -- (<${env.BUILD_URL}|Open>)")")
             //           error "Pull Kernel failed:" //" ${PULL_RESULT}"
                   // }
                }
            }
        }
        stage('Build Kernel') {
            steps {
                sh '''#!/bin/bash -ex
                export MY_DIR=$(pwd)
                export TOOLCHAIN_SRC=bootlin-toolchain-gcc-93 
                export TOOLCHAIN_DIR=gcc-9.3-glibc-2.31
                export KERNEL_SRC=l4t-sources-35-1
                export KERNEL_DIR=kernel-5.10
                export CROSS_COMPILE=/l4t5-gcc/bin/aarch64-buildroot-linux-gnu-
                export JETPACK=$MY_DIR/nvidia/nvidia_sdk/JetPack_5.0.2_Linux_JETSON_XAVIER_NX_TARGETS/Linux_for_Tegra
                export KERNEL_OUT=$MY_DIR/images
                export KERNEL_MODULES_OUT=$JETPACK/images/modules

                mkdir -p $KERNEL_OUT
                cd kernel/kernel-5.10
                make mrproper

                make ARCH=arm64 O=$KERNEL_OUT tegra_defconfig

                make ARCH=arm64 O=$KERNEL_OUT CROSS_COMPILE=$CROSS_COMPILE -j4 LOCALVERSION="-tegra"

                '''
            }
        }
        stage('Upload to S3') {
            steps {
                withAWS(region:'eu-central-1',credentials:'jenkins.conexus.cloud') {
                    sh 'echo "Uploading content with AWS creds"'
                    sh 'touch file.txt'
                    s3Upload(file:'images/arch/arm64/boot/dts/nvidia/tegra194-p3668-all-mx1030-1.dtb', bucket:'l4t5-artifact-bucket', path:'aib-l4t-r35.2.1/tegra194-p3668-all-mx1030-1.dtb')
                    s3Upload(file:'images/arch/arm64/boot/dts/nvidia/tegra194-p3668-all-mx1030-2.dtb', bucket:'l4t5-artifact-bucket', path:'aib-l4t-r35.2.1/tegra194-p3668-all-mx1030-2.dtb')
                }
                slackSend (color: '#7CFC00', message: "Finished: L4T SP5 build -- Build ${env.BUILD_NUMBER} (<${env.BUILD_URL}|Open>)")
            }
        }
	}
}